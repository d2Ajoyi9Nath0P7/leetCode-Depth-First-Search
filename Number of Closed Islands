bool isValid(int row,int col,vector<vector<int>>& grid)
{
    if(row >= 0 && row < grid.size() && col >= 0 && col < grid[0].size() && grid[row][col] == 0)
    {
        return true;
    }
    return false;
}

void dfs(int row,int col,vector<vector<int>>& grid)
{
    grid[row][col] = 1;

    if(isValid(row-1,col,grid))
    {
        dfs(row-1,col,grid);
    }
    if(isValid(row,col+1,grid))
    {
        dfs(row,col+1,grid);
    }
    if(isValid(row+1,col,grid))
    {
        dfs(row+1,col,grid);
    }
    if(isValid(row,col-1,grid))
    {
        dfs(row,col-1,grid);
    }
}

int closedIsland(vector<vector<int>>& grid)
{
    //boundary dfs

    for(int i = 0 ; i < grid.size(); i++)
    {
        int j = 0;
        int k = grid[0].size() - 1;

        if(grid[i][j] == 0)
        {
            dfs(i,j,grid);
        }
        if(grid[i][k] == 0)//(0,2) (1,2) (2,2)
        {
            dfs(i,k,grid);
        }
    }

    for(int j = 0 ; j < grid[0].size(); j++)
    {
        int i = 0;
        int k = grid.size() - 1;

        if(grid[i][j] == 0)
        {
            dfs(i,j,grid);
        }
        if(grid[k][j] == 0)
        {
            dfs(k,j,grid);
        }
    }

    int count = 0;

    for(int i = 0 ; i < grid.size(); i++)
    {
        for(int j = 0 ; j < grid[0].size(); j++)
        {
            if(grid[i][j] == 0)
            {
                count++;
                dfs(i,j,grid);
            }
        }
    }

    return count;
}
