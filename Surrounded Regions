void fun(vector<vector<char>>&board)
{
    for(int i=0 ; i < board.size(); i++)
    {
        for(int j = 0 ; j < board[0].size(); j++)
        {
            if(board[i][j] == 'B')
            {
                board[i][j] = 'O';
            }
            else if(board[i][j] == 'O')
            {
                board[i][j] = 'X';
            }
        }
    }
}

bool isValid(int row,int col,vector<vector<char>>&board)
{
    if(row >= 0 && row < board.size() && col >= 0 && col < board[0].size() && board[row][col] == 'O')
    {
        return true;
    }
    return false;
}

void dfs(int row,int col,vector<vector<char>>& board)
{
    board[row][col] = 'B';

    if(isValid(row,col+1,board))
    {
        dfs(row,col+1,board);
    }
    if(isValid(row+1,col,board))
    {
        dfs(row+1,col,board);
    }
    if(isValid(row,col-1,board))
    {
        dfs(row,col-1,board);
    }
    if(isValid(row-1,col,board))
    {
        dfs(row-1,col,board);
    }
}

void solve(vector<vector<char>>& board)
{
    for(int i = 0 ; i < board.size(); i++)
    {
        int j = 0;
        if(board[i][j] == 'O')
        {
            dfs(i,j,board);//
        }
    }
    for(int j = 0 ; j < board[0].size(); j++)
    {
        int i = 0;
        if(board[i][j] == 'O')
        {
            dfs(i,j,board);
        }
    }
    for(int j = 0 ; j < board[0].size(); j++)
    {
        int i = board.size() - 1;
        if(board[i][j] == 'O')
        {
            dfs(i,j,board);
        }
    }
    for(int i = 0 ; i < board.size(); i++)
    {
        int j = board[0].size() - 1;
        if(board[i][j] == 'O')
        {
            dfs(i,j,board);
        }
    }
    fun(board);
}
